akka {
  actor.provider = cluster

  remote.artery {
    #log-sent-messages = on
    #log-received-messages = on
    canonical {
      hostname = ${?CLUSTERHOST}
      port = ${?CLUSTERPORT}
    }
    bind {
        port = ${?CLUSTERPORT}
        hostname = 0.0.0.0
        bind-timeout = 3s
      }
  }

  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    shutdown-after-unsuccessful-join-seed-nodes = 120s

    sharding {
      least-shard-allocation-strategy.rebalance-absolute-limit = 20
    }
    
    #seed-nodes = [
    #  ${?SEED1},
    #  ${?SEED2}]
  }
  
  discovery {
  	kubernetes-api {
	    # Selector value to query pod API with.
	    # `%s` will be replaced with the configured effective name, which defaults to the actor system name
	    pod-label-selector = "podapp=%s"
    }
  }
  
  management {
    cluster.bootstrap {
	  contact-point-discovery {
	    discovery-method = kubernetes-api
	    required-contact-point-nr = 2
	  }
	}
	health-checks {
	  readiness-checks {
	    cluster-membership = ""
	  }
	}
	http {
	  bind-hostname = 0.0.0.0
	  port = 9085
	  #canonical.port = 9086
	  route-providers-read-only = true
	}
  }
  
}